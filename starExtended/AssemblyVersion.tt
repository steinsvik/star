<#@ template language="C#" debug="True" hostSpecific="True"#>
<#@ output extension="cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text.RegularExpressions" #>

// T4 Generator from http://www.codeproject.com/Tips/656583/Walkthrough-How-to-increment-AssemblyFileVersion Bruno Tagliapietra 
// USE:
// Add reference: "Microsoft.VisualStudio.TextTemplating.14.0" to project
// Add reference: "Microsoft.VisualStudio.TextTemplating.Interfaces.10.0" to project
// Run by adding prebuild event command line action:
//    set textTemplatingPath="%CommonProgramFiles(x86)%\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe"
//    if %textTemplatingPath%=="\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe" set textTemplatingPath="%CommonProgramFiles%\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe"
//    %textTemplatingPath% "$(ProjectDir)AssemblyVersion.tt" 
// Exclude this generated file "AssemblyVersion.cs" from svn
//When opening build in new sation. This file must be saved, to generate code.
 
<# 
    // Svn generator code:
	string toolPath = @"C:\Program Files\TortoiseSVN\bin\SubWCRev.exe";
    int svnNumber = 0;
	string workingFolder = "";
	string output  = "";
	string solutionsPath  ="";
	string errWarnString = "";
    try          
    {
        solutionsPath = this.Host.ResolvePath("AssemblyVersion.tt"); // this.Host.ResolveAssemblyReference("$(SolutionDir)");//
        if (Directory.Exists(Path.GetDirectoryName(solutionsPath) + @"\.svn"))
        { workingFolder = Path.GetDirectoryName(solutionsPath);}
        else if (Directory.Exists(Directory.GetParent(Path.GetDirectoryName(solutionsPath)).ToString()+ @"\.svn"))
        { workingFolder = Directory.GetParent(Path.GetDirectoryName(solutionsPath)).ToString(); } 
        else if (Directory.Exists(Directory.GetParent(Directory.GetParent(Path.GetDirectoryName(solutionsPath)).ToString()).ToString() + @"\.svn"))
        { workingFolder = Directory.GetParent(Directory.GetParent(Path.GetDirectoryName(solutionsPath)).ToString()).ToString();}
		else 
        {workingFolder =  Directory.GetParent( Directory.GetParent(Directory.GetParent(Path.GetDirectoryName(solutionsPath)).ToString()).ToString()).ToString();}
        Process p = new Process();
		p.StartInfo.UseShellExecute = false;
		p.StartInfo.RedirectStandardOutput = true;
		p.StartInfo.FileName = toolPath;
        p.StartInfo.Arguments = "\"" + workingFolder+ "\"" ;  
        p.Start();
        string modsFound = "Local modifications found";
		output = p.StandardOutput.ReadToEnd();
		p.WaitForExit();
        string[] numbers = Regex.Split(output, @"\D+");
        foreach (var numb in numbers)
        {
			try{
				int intVal = int.Parse(numb.Trim());
				if (intVal >= svnNumber)
					svnNumber = intVal;
			} catch{}
        }
        if (output.IndexOf(modsFound) != -1)
		{
            svnNumber = 90000000 + svnNumber;
			errWarnString = @"#if DEBUG
#warning Project not up to date.
#else
#error Project not up to date. Required for release build
#endif";
		}
    }
	catch
    { svnNumber = 0; }

	// Build type


	// MANUAL REVISIONING
	// Only one minor version per StableRelease. no mater how small the  change. Can have multiple RC, LR and so forth. "RC" can be given to a client.


	bool StableRelease = false;
	int Major = 0;
	int Minor = 1;
	int Fix   = 01;
	string BuildInfo = "Beta"; // "Alpha", "Beta"/"LR", "RC",  Recommended Use blank for releases. 
	string dispBuildInfo = StableRelease ? BuildInfo : (BuildInfo + " (" + Fix + "." + svnNumber + ")");



	
#>

// This code was generated by a tool. Any changes made manually will be lost
using System.Reflection;

<#= errWarnString #>

[assembly: AssemblyInformationalVersion(	"<#= Major #>.<#= Minor #> <#= dispBuildInfo #>")]		// Product identification. Replace to coordinate with suite
[assembly: AssemblyFileVersion(				"<#= Major #>.<#= Minor #>.<#= Fix #>.<#= svnNumber #>")]		// Unique build id.
[assembly: AssemblyVersion(					"<#= Major #>.<#= Minor #>.0.0")]								// Used to identify assembly for referencing. When changes , rebuinding needed
																											// Decouple from Major and minor if needed.
